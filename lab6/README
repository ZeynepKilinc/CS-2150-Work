Lab 6 taught about the HashTable data structure and using make.
(Note: the prelab folder is actually just the entirety of the lab)

Tasks
------

* Define and implement hashTable.h and hashTable.cpp (I opted for separate-chaining)
* Create wordPuzzle.cpp to solve the puzzle described below
* Create Makefile that compiles to a.out
* Create a bash script averagetime.sh to compute the average time of a set of inputs

The Puzzle
-----------

The word puzzle is a simple word search.  Given a grid file and a dictionary file, find all of the words in the grid.  The grid files are all clearly named *.grid.txt where * is the size.  There are two dictionary files included, words.txt and a slightly smaller words2.txt.
The parameters are passed in as command line parameters to a.out: the first parameter is the dictionary and the second is the grid.

The format of a grid file is as follows: 

* First line = number of rows
* Second Line = number of columns
* Third Line = chars in 2D-grid listed left-to-right, top-to-bottom

The format of a dictionary file is a list of words on separate lines.

Goals
------

The goal of the lab was to minimize the time to compute the larger look-up combinations ( e.g. the 300x300 grid and the larger words.txt dictionary )

The largest optimization I found was when I added a custom data-member to the hash table to store the maximum word-size.  This increased the look-up time by orders of magnitude.  As a result of this optimization, my algorithm performed faster than the given example output files.

Another large optimization was the creation of a good hash function for a string. 

The smallest optimization (yet still a significant one) was reserving all console prints till the end (after the timer stopped).

In the end I was able to reduce a select wordPuzzle's compuation time 22x, from 52 seconds to 2.3.


If you fork this and want to make it, here are some sample inputs:
    ./a.out words.txt 140x70.grid.txt
    ./a.out words2.txt 300x300.grid.txt
